const TelegramBot = require('node-telegram-bot-api');
const BybitAPI = require('./bybitApi');
const TechnicalIndicators = require('./technicalIndicators');
const LSTM = require('./lstmModel');
const Analyzer = require('./analyzer');
const WebInterface = require('./webInterface');
const config = require('./config');
const fs = require('fs').promises;
const path = require('path');

class BybitAnalyzerBot {
  constructor() {
    this.bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, { polling: true });
    this.bybitAPI = new BybitAPI();
    this.technicalIndicators = new TechnicalIndicators();
    this.lstm = new LSTM();
    this.analyzer = new Analyzer(this.bybitAPI, this.technicalIndicators, this.lstm);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    this.webInterface = new WebInterface();
    
    this.userStates = new Map();
    this.setupBot();
  }

  setupBot() {
    // Command handlers
    this.bot.onText(/\/start/, this.handleStart.bind(this));
    this.bot.onText(/\/analyze (.+)/, this.handleAnalyzeCommand.bind(this));
    this.bot.onText(/\/strategy (.+)/, this.handleStrategyCommand.bind(this));
    this.bot.onText(/\/help/, this.handleHelp.bind(this));
    this.bot.onText(/\/balance/, this.handleBalance.bind(this));
    this.bot.onText(/\/liquidations (.+)/, this.handleLiquidations.bind(this));
    this.bot.onText(/\/trades (.+)/, this.handleTrades.bind(this));
    this.bot.onText(/\/positions/, this.handlePositions.bind(this));
    this.bot.onText(/\/popular/, this.handlePopular.bind(this));

    // Callback query handlers
    this.bot.on('callback_query', this.handleCallbackQuery.bind(this));

    // General message handler
    this.bot.on('message', this.handleMessage.bind(this));
  }

  async handleStart(msg) {
    const chatId = msg.chat.id;
    const welcomeMessage = `
üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bybit Analyzer Bot!*

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ –Ω–∞ Bybit —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
‚Ä¢ ü§ñ ML LSTM –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
‚Ä¢ üìä 15+ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–≤–µ—á–µ–π
‚Ä¢ üí∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ "–í—Ö–æ–¥ –ø–æ–¥ —Ñ–∞–Ω–¥–∏–Ω–≥"

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/analyze TICKER - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
/strategy TICKER - –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
/liquidations TICKER - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
/trades TICKER - –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
/positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/popular - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã
/help - –°–ø—Ä–∞–≤–∫–∞

*–ü—Ä–∏–º–µ—Ä—ã:*
/analyze BTCUSDT
/strategy ETHUSDT
/liquidations SOLUSDT
/trades ADAUSDT
`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìä –ê–Ω–∞–ª–∏–∑ BTCUSDT', callback_data: 'analyze_BTCUSDT' },
          { text: 'üìä –ê–Ω–∞–ª–∏–∑ ETHUSDT', callback_data: 'analyze_ETHUSDT' }
        ],
        [
          { text: 'üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏', callback_data: 'strategy_menu' },
          { text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'balance' }
        ],
        [
          { text: 'üìà –ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏', callback_data: 'positions' },
          { text: 'üî• –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏', callback_data: 'liquidations_menu' }
        ],
        [
          { text: 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏', callback_data: 'trades_menu' },
          { text: 'üìö –°–ø—Ä–∞–≤–∫–∞', callback_data: 'help' }
        ],
        [
          { text: '‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã', callback_data: 'popular' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

    // Set persistent menu
    await this.setPersistentMenu(chatId);
  }

  async setPersistentMenu(chatId) {
    const menu = {
      keyboard: [
        [
          { text: 'üìä –ê–Ω–∞–ª–∏–∑' },
          { text: 'üí∞ –ë–∞–ª–∞–Ω—Å' }
        ],
        [
          { text: 'üî• –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏' },
          { text: 'üìà –ü–æ–∑–∏—Ü–∏–∏' }
        ],
        [
          { text: 'üìã –°–¥–µ–ª–∫–∏' },
          { text: 'üìö –ü–æ–º–æ—â—å' }
        ]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };

    await this.bot.sendMessage(chatId, '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.', {
      reply_markup: menu
    });
  }

  async handleAnalyzeCommand(msg, match) {
    const chatId = msg.chat.id;
    const symbol = match[1].toUpperCase();
    
    await this.performAnalysis(chatId, symbol);
  }

  async handleStrategyCommand(msg, match) {
    const chatId = msg.chat.id;
    const symbol = match[1].toUpperCase();
    
    await this.showStrategyMenu(chatId, symbol);
  }

  async handleBalance(msg) {
    const chatId = msg.chat.id;
    await this.showBalance(chatId);
  }

  async handleLiquidations(msg, match) {
    const chatId = msg.chat.id;
    const symbol = match ? match[1].toUpperCase() : 'BTCUSDT';
    await this.showLiquidations(chatId, symbol);
  }

  async handleTrades(msg, match) {
    const chatId = msg.chat.id;
    const symbol = match ? match[1].toUpperCase() : 'BTCUSDT';
    await this.showTrades(chatId, symbol);
  }

  async handlePositions(msg) {
    const chatId = msg.chat.id;
    await this.showPositions(chatId);
  }

  async handleHelp(msg) {
    const chatId = msg.chat.id;
    await this.showHelp(chatId);
  }

  async handlePopular(msg) {
    const chatId = msg.chat.id;
    await this.showPopular(chatId);
  }

  async handleCallbackQuery(query) {
    const chatId = query.message.chat.id;
    const data = query.data;

    await this.bot.answerCallbackQuery(query.id);

    if (data.startsWith('analyze_')) {
      const symbol = data.split('_')[1];
      await this.performAnalysis(chatId, symbol);
    } else if (data.startsWith('strategy_')) {
      const parts = data.split('_');
      const strategyType = parts[1];
      const symbol = parts[2];
      
      if (strategyType === 'funding') {
        await this.performFundingStrategy(chatId, symbol);
      } else if (strategyType === 'technical') {
        await this.performTechnicalStrategy(chatId, symbol);
      } else if (strategyType === 'lstm') {
        await this.performLSTMStrategy(chatId, symbol);
      } else if (strategyType === 'patterns') {
        await this.performPatternsStrategy(chatId, symbol);
      } else if (strategyType === 'all') {
        await this.performAllStrategies(chatId, symbol);
      }
    } else if (data === 'balance') {
      await this.showBalance(chatId);
    } else if (data === 'positions') {
      await this.showPositions(chatId);
    } else if (data === 'strategy_menu') {
      await this.showStrategySelectionMenu(chatId);
    } else if (data === 'strategy_funding_menu') {
      await this.showPopular(chatId, 'funding');
    } else if (data === 'strategy_technical_menu') {
      await this.showPopular(chatId, 'technical');
    } else if (data === 'strategy_lstm_menu') {
      await this.showPopular(chatId, 'lstm');
    } else if (data === 'strategy_patterns_menu') {
      await this.showPopular(chatId, 'patterns');
    } else if (data === 'strategy_full_menu') {
      await this.showPopular(chatId, 'full');
    } else if (data === 'strategy_all_menu') {
      await this.showPopular(chatId, 'all');
    } else if (data === 'liquidations_menu') {
      await this.showLiquidationsMenu(chatId);
    } else if (data === 'trades_menu') {
      await this.showTradesMenu(chatId);
    } else if (data === 'help') {
      await this.showHelp(chatId);
    } else if (data === 'popular') {
      await this.showPopular(chatId);
    }
  }

  async handleMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === 'üìä –ê–Ω–∞–ª–∏–∑') {
      await this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT):');
      this.userStates.set(chatId, { waitingFor: 'symbol' });
    } else if (text === 'üí∞ –ë–∞–ª–∞–Ω—Å') {
      await this.showBalance(chatId);
    } else if (text === 'üî• –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏') {
      await this.showLiquidationsMenu(chatId);
    } else if (text === 'üìà –ü–æ–∑–∏—Ü–∏–∏') {
      await this.showPositions(chatId);
    } else if (text === 'üìã –°–¥–µ–ª–∫–∏') {
      await this.showTradesMenu(chatId);
    } else if (text === 'üìö –ü–æ–º–æ—â—å') {
      await this.showHelp(chatId);
    } else if (this.userStates.get(chatId)?.waitingFor === 'symbol') {
      const symbol = text.toUpperCase();
      this.userStates.delete(chatId);
      await this.performAnalysis(chatId, symbol);
    }
  }

  async performAnalysis(chatId, symbol) {
    try {
      const progressMsg = await this.bot.sendMessage(chatId, 'üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...');
      
      // Progress updates
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 20);
      const analysis = await this.analyzer.analyzeCrypto(symbol);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'ü§ñ –ê–Ω–∞–ª–∏–∑ LSTM –º–æ–¥–µ–ª–∏...', 50);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...', 80);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!', 100);

      // Send comprehensive report
      await this.sendAnalysisReport(chatId, analysis);
      
      // Send charts
      if (analysis.charts) {
        await this.sendCharts(chatId, analysis.charts, symbol);
      }

    } catch (error) {
      console.error('Error in analysis:', error);
      await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${symbol}: ${error.message}`);
    }
  }

  async performFundingStrategy(chatId, symbol) {
    try {
      const progressMsg = await this.bot.sendMessage(chatId, 'üéØ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞...');
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 30);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
      const tickerInfo = await this.analyzer.bybitAPI.getTickerInfo(symbol);
      const fundingRate = await this.analyzer.bybitAPI.getFundingRate(symbol);
      const orderBook = await this.analyzer.bybitAPI.getOrderBook(symbol);
      const openInterest = await this.analyzer.bybitAPI.getOpenInterest(symbol);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üéØ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–Ω–¥–∏–Ω–≥–∞...', 70);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞
      const fundingStrategy = this.analyzer.indicators.analyzeFundingStrategy(
        fundingRate.fundingRate,
        tickerInfo.nextFundingTime,
        tickerInfo.lastPrice,
        orderBook,
        openInterest.openInterest
      );
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!', 100);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
      await this.sendFundingStrategyReport(chatId, symbol, fundingStrategy, tickerInfo, fundingRate);
      
    } catch (error) {
      console.error('Error in funding strategy:', error);
      await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ ${symbol}: ${error.message}`);
    }
  }

  async performTechnicalStrategy(chatId, symbol) {
    try {
      const progressMsg = await this.bot.sendMessage(chatId, 'üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...');
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 30);
      const klineData = await this.analyzer.bybitAPI.getKlineData(symbol);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìà –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...', 70);
      const technicalAnalysis = await this.analyzer.indicators.analyzeAll(klineData);
      const signals = this.analyzer.indicators.generateSignals(technicalAnalysis, klineData[klineData.length - 1].close);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!', 100);
      
      await this.sendTechnicalStrategyReport(chatId, symbol, technicalAnalysis, signals);
      
    } catch (error) {
      console.error('Error in technical strategy:', error);
      await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ ${symbol}: ${error.message}`);
    }
  }

  async performLSTMStrategy(chatId, symbol) {
    try {
      const progressMsg = await this.bot.sendMessage(chatId, 'ü§ñ LSTM –∞–Ω–∞–ª–∏–∑...');
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 30);
      const klineData = await this.analyzer.bybitAPI.getKlineData(symbol);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...', 70);
      const lstmPrediction = await this.analyzer.lstmModel.quickPredict(klineData);
      const trendAnalysis = this.analyzer.lstmModel.analyzeTrend(klineData, lstmPrediction);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!', 100);
      
      await this.sendLSTMStrategyReport(chatId, symbol, lstmPrediction, trendAnalysis);
      
    } catch (error) {
      console.error('Error in LSTM strategy:', error);
      await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ LSTM –∞–Ω–∞–ª–∏–∑–µ ${symbol}: ${error.message}`);
    }
  }

  async performPatternsStrategy(chatId, symbol) {
    try {
      const progressMsg = await this.bot.sendMessage(chatId, 'üìà –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...');
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 30);
      const klineData = await this.analyzer.bybitAPI.getKlineData(symbol);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìà –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...', 70);
      const patterns = this.analyzer.indicators.detectCandlestickPatterns(klineData);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!', 100);
      
      await this.sendPatternsStrategyReport(chatId, symbol, patterns);
      
    } catch (error) {
      console.error('Error in patterns strategy:', error);
      await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ${symbol}: ${error.message}`);
    }
  }

  async performAllStrategies(chatId, symbol) {
    try {
      const progressMsg = await this.bot.sendMessage(chatId, 'üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...');
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 20);
      const analysis = await this.analyzer.analyzeCrypto(symbol);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üéØ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...', 60);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, 'üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...', 80);
      
      await this.updateProgress(progressMsg.chat.id, progressMsg.message_id, '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!', 100);
      
      await this.sendAllStrategiesReport(chatId, symbol, analysis);
      
    } catch (error) {
      console.error('Error in all strategies:', error);
      await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ ${symbol}: ${error.message}`);
    }
  }

  async updateProgress(chatId, messageId, text, percentage) {
    const progressBar = this.createProgressBar(percentage);
    const message = `${text}\n\n${progressBar} ${percentage}%`;
    
    try {
      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId
      });
    } catch (error) {
      console.error('Error updating progress:', error);
    }
  }

  createProgressBar(percentage) {
    const filled = Math.round(percentage / 10);
    const empty = 10 - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  }

  async sendAnalysisReport(chatId, analysis) {
    const report = analysis;
    
    let message = `üìä *–ê–Ω–∞–ª–∏–∑ ${this.escapeMarkdown(report.symbol)}*\n\n`;
    
    // Price Information
    message += `üí∞ *–¶–µ–Ω–∞:* $${this.escapeMarkdown(report.priceInfo.currentPrice.toFixed(2))}\n`;
    message += `üìà *–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:* ${this.escapeMarkdown((report.priceInfo.priceChange24h * 100).toFixed(2))}%\n`;
    message += `üìä *–û–±—ä–µ–º 24—á:* ${this.escapeMarkdown(this.formatNumber(report.priceInfo.volume24h))}\n\n`;
    
    // Technical Indicators
    message += `üìä *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:*\n`;
    if (report.technicalIndicators.rsi) {
      const rsi = report.technicalIndicators.rsi;
      const rsiEmoji = rsi < 30 ? 'üü¢' : rsi > 70 ? 'üî¥' : 'üü°';
      message += `${rsiEmoji} RSI: ${this.escapeMarkdown(rsi.toFixed(2))}\n`;
    }
    
    if (report.technicalIndicators.macd) {
      const macd = report.technicalIndicators.macd;
      const macdEmoji = macd.macd > macd.signal ? 'üü¢' : 'üî¥';
      message += `${macdEmoji} MACD: ${this.escapeMarkdown(macd.macd.toFixed(4))}\n`;
    }
    
    // LSTM Analysis
    if (report.lstmAnalysis) {
      message += `\nü§ñ *LSTM –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:*\n`;
      const trendText = report.lstmAnalysis.trend === 'bullish' ? 'üü¢ –ë—ã—á–∏–π' : 'üî¥ –ú–µ–¥–≤–µ–∂–∏–π';
      message += `üìà –¢—Ä–µ–Ω–¥: ${this.escapeMarkdown(trendText)}\n`;
      message += `üí™ –°–∏–ª–∞: ${this.escapeMarkdown(report.lstmAnalysis.strength)}\n`;
    }
    
    // Candlestick Patterns
    if (report.candlestickPatterns && report.candlestickPatterns.length > 0) {
      message += `\nüïØÔ∏è *–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π:*\n`;
      const recentPatterns = report.candlestickPatterns.slice(-3);
      recentPatterns.forEach(pattern => {
        const emoji = pattern.signal === 'BULLISH' ? 'üü¢' : pattern.signal === 'BEARISH' ? 'üî¥' : 'üü°';
        message += `${emoji} ${this.escapeMarkdown(pattern.type)} (${this.escapeMarkdown(pattern.strength)})\n`;
      });
    }
    
    // Recommendations
    if (report.recommendations && report.recommendations.length > 0) {
      message += `\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
      report.recommendations.slice(0, 3).forEach(rec => {
        message += `‚Ä¢ ${this.escapeMarkdown(rec)}\n`;
      });
    }
    
    // Support/Resistance
    if (report.supportResistance) {
      message += `\nüìä *–£—Ä–æ–≤–Ω–∏:*\n`;
      if (report.supportResistance.support.length > 0) {
        const support = report.supportResistance.support[0];
        message += `üü¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: $${this.escapeMarkdown(support.level.toFixed(2))}\n`;
      }
      if (report.supportResistance.resistance.length > 0) {
        const resistance = report.supportResistance.resistance[0];
        message += `üî¥ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: $${this.escapeMarkdown(resistance.level.toFixed(2))}\n`;
      }
    }

    try {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error sending analysis report:', error);
      // Fallback to plain text if Markdown fails
      const plainMessage = message.replace(/\*/g, '').replace(/_/g, '');
      await this.bot.sendMessage(chatId, plainMessage);
    }
  }

  async sendFundingStrategyReport(chatId, symbol, fundingStrategy, tickerInfo, fundingRate) {
    let message = `üéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è "–í—Ö–æ–¥ –ø–æ–¥ —Ñ–∞–Ω–¥–∏–Ω–≥" - ${symbol}*\n\n`;
    
    message += `üí∞ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* $${tickerInfo.lastPrice.toFixed(2)}\n`;
    message += `üìà *–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:* ${(tickerInfo.price24hPcnt * 100).toFixed(2)}%\n\n`;
    
    // –§–∞–Ω–¥–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += `üéØ *–ê–Ω–∞–ª–∏–∑ —Ñ–∞–Ω–¥–∏–Ω–≥–∞:*\n`;
    fundingStrategy.details.forEach(detail => {
      message += `‚Ä¢ ${detail}\n`;
    });
    
    message += `\nüìä *–°–∏–≥–Ω–∞–ª:* ${fundingStrategy.signal}\n`;
    message += `üí™ *–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞:* ${fundingStrategy.strength}\n`;
    message += `üéØ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* ${fundingStrategy.confidence.toFixed(1)}%\n\n`;
    
    if (fundingStrategy.signal !== 'NEUTRAL') {
      message += `üìà *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ö–æ–¥—É:*\n`;
      message += `üìç –í—Ö–æ–¥: $${fundingStrategy.entryPrice.toFixed(2)}\n`;
      message += `üõë –°—Ç–æ–ø-–ª–æ—Å—Å: $${fundingStrategy.stopLoss.toFixed(2)}\n`;
      message += `üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: $${fundingStrategy.takeProfit.toFixed(2)}\n`;
      message += `‚ö° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–ª–µ—á–æ: ${fundingStrategy.leverage.toFixed(1)}x\n`;
      message += `üìè –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${fundingStrategy.positionSize.toFixed(1)}%\n\n`;
      
      const riskReward = Math.abs((fundingStrategy.takeProfit - fundingStrategy.entryPrice) / (fundingStrategy.entryPrice - fundingStrategy.stopLoss));
      message += `‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: 1:${riskReward.toFixed(2)}\n`;
    }
    
    message += `\nüí° *–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞:*\n`;
    message += `‚Ä¢ –ê–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞\n`;
    message += `‚Ä¢ –í—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞\n`;
    message += `‚Ä¢ –ê–Ω–∞–ª–∏–∑–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫\n`;
    message += `‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ\n`;

    await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  async sendTechnicalStrategyReport(chatId, symbol, technicalAnalysis, signals) {
    let message = `üìä *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - ${symbol}*\n\n`;
    
    message += `üìà *–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:*\n`;
    message += `üü¢ –ü–æ–∫—É–ø–∫–∞: ${signals.buy}\n`;
    message += `üî¥ –ü—Ä–æ–¥–∞–∂–∞: ${signals.sell}\n`;
    message += `üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ: ${signals.neutral}\n\n`;
    
    message += `üìä *–î–µ—Ç–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:*\n`;
    signals.details.forEach(detail => {
      message += `‚Ä¢ ${detail}\n`;
    });
    
    message += `\nüìä *–ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:*\n`;
    
    if (technicalAnalysis.rsi && technicalAnalysis.rsi.length > 0) {
      const rsi = technicalAnalysis.rsi[technicalAnalysis.rsi.length - 1];
      const rsiEmoji = rsi < 30 ? 'üü¢' : rsi > 70 ? 'üî¥' : 'üü°';
      message += `${rsiEmoji} RSI: ${rsi.toFixed(2)}\n`;
    }
    
    if (technicalAnalysis.macd && technicalAnalysis.macd.length > 0) {
      const macd = technicalAnalysis.macd[technicalAnalysis.macd.length - 1];
      const macdEmoji = macd.MACD > macd.signal ? 'üü¢' : 'üî¥';
      message += `${macdEmoji} MACD: ${macd.MACD.toFixed(4)}\n`;
    }
    
    if (technicalAnalysis.stochastic && technicalAnalysis.stochastic.length > 0) {
      const stoch = technicalAnalysis.stochastic[technicalAnalysis.stochastic.length - 1];
      const stochEmoji = stoch.k < 20 ? 'üü¢' : stoch.k > 80 ? 'üî¥' : 'üü°';
      message += `${stochEmoji} Stochastic K: ${stoch.k.toFixed(2)}\n`;
    }

    await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  async sendLSTMStrategyReport(chatId, symbol, lstmPrediction, trendAnalysis) {
    let message = `ü§ñ *LSTM –∞–Ω–∞–ª–∏–∑ - ${symbol}*\n\n`;
    
    message += `üìà *–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã:*\n`;
    message += `üéØ –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥: $${lstmPrediction.toFixed(2)}\n\n`;
    
    message += `üìä *–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞:*\n`;
    message += `üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${trendAnalysis.trend === 'bullish' ? 'üü¢ –ë—ã—á–∏–π' : 'üî¥ –ú–µ–¥–≤–µ–∂–∏–π'}\n`;
    message += `üí™ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: ${trendAnalysis.strength}\n`;
    message += `üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${trendAnalysis.priceChange.toFixed(2)}%\n\n`;
    
    message += `ü§ñ *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ LSTM –º–æ–¥–µ–ª–∏:*\n`;
    message += `‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n`;
    message += `‚Ä¢ –£—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞\n`;
    message += `‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n`;
    message += `‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ä—ã–Ω–∫–∞\n`;

    await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  async sendPatternsStrategyReport(chatId, symbol, patterns) {
    let message = `üìà *–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–≤–µ—á–µ–π - ${symbol}*\n\n`;
    
    if (patterns.length === 0) {
      message += `üü° –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–∞—Ö\n`;
    } else {
      message += `üìä *–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:*\n`;
      
      const recentPatterns = patterns.slice(-5); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      recentPatterns.forEach((pattern, index) => {
        const emoji = pattern.signal === 'BULLISH' ? 'üü¢' : pattern.signal === 'BEARISH' ? 'üî¥' : 'üü°';
        const strengthEmoji = pattern.strength === 'VERY_STRONG' ? 'üî•' : pattern.strength === 'STRONG' ? 'üí™' : 'üìä';
        message += `${index + 1}. ${emoji} ${pattern.type} (${strengthEmoji} ${pattern.strength})\n`;
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const bullishCount = patterns.filter(p => p.signal === 'BULLISH').length;
      const bearishCount = patterns.filter(p => p.signal === 'BEARISH').length;
      const neutralCount = patterns.filter(p => p.signal === 'NEUTRAL').length;
      
      message += `\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:*\n`;
      message += `üü¢ –ë—ã—á—å–∏: ${bullishCount}\n`;
      message += `üî¥ –ú–µ–¥–≤–µ–∂—å–∏: ${bearishCount}\n`;
      message += `üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: ${neutralCount}\n`;
    }
    
    message += `\nüí° *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:*\n`;
    message += `‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞\n`;
    message += `‚Ä¢ –°–∏–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ—é—Ç –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n`;
    message += `‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏\n`;

    await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  async sendAllStrategiesReport(chatId, symbol, analysis) {
    let message = `üîç *–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π - ${symbol}*\n\n`;
    
    // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += `üí∞ *–¶–µ–Ω–∞:* $${analysis.priceInfo.currentPrice.toFixed(2)}\n`;
    message += `üìà *–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:* ${(analysis.priceInfo.priceChange24h * 100).toFixed(2)}%\n\n`;
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞
    if (analysis.fundingStrategy) {
      message += `üéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞:*\n`;
      message += `üìä –°–∏–≥–Ω–∞–ª: ${analysis.fundingStrategy.signal}\n`;
      message += `üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.fundingStrategy.confidence.toFixed(1)}%\n`;
      if (analysis.fundingStrategy.signal !== 'NEUTRAL') {
        message += `üìç –í—Ö–æ–¥: $${analysis.fundingStrategy.entryPrice.toFixed(2)}\n`;
        message += `üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: $${analysis.fundingStrategy.takeProfit.toFixed(2)}\n`;
      }
      message += `\n`;
    }
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    if (analysis.signals) {
      message += `üìä *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:*\n`;
      message += `üü¢ –ü–æ–∫—É–ø–∫–∞: ${analysis.signals.buy}\n`;
      message += `üî¥ –ü—Ä–æ–¥–∞–∂–∞: ${analysis.signals.sell}\n`;
      message += `üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ: ${analysis.signals.neutral}\n\n`;
    }
    
    // LSTM –∞–Ω–∞–ª–∏–∑
    if (analysis.lstmAnalysis) {
      message += `ü§ñ *LSTM –∞–Ω–∞–ª–∏–∑:*\n`;
      message += `üìà –¢—Ä–µ–Ω–¥: ${analysis.lstmAnalysis.trend === 'bullish' ? 'üü¢ –ë—ã—á–∏–π' : 'üî¥ –ú–µ–¥–≤–µ–∂–∏–π'}\n`;
      message += `üí™ –°–∏–ª–∞: ${analysis.lstmAnalysis.strength}\n\n`;
    }
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
    if (analysis.candlestickPatterns && analysis.candlestickPatterns.length > 0) {
      message += `üìà *–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π:*\n`;
      const recentPatterns = analysis.candlestickPatterns.slice(-3);
      recentPatterns.forEach(pattern => {
        const emoji = pattern.signal === 'BULLISH' ? 'üü¢' : pattern.signal === 'BEARISH' ? 'üî¥' : 'üü°';
        message += `${emoji} ${pattern.type}\n`;
      });
      message += `\n`;
    }
    
    // –û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    message += `üí° *–û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n`;
    if (analysis.recommendations && analysis.recommendations.length > 0) {
      analysis.recommendations.slice(0, 3).forEach(rec => {
        message += `‚Ä¢ ${rec}\n`;
      });
    }

    await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  }

  async sendCharts(chatId, charts, symbol) {
    try {
      if (charts.main) {
        await this.bot.sendPhoto(chatId, charts.main, {
          caption: `üìà –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ ${symbol}`
        });
      }
      
      if (charts.rsi) {
        await this.bot.sendPhoto(chatId, charts.rsi, {
          caption: `üìä RSI ${symbol}`
        });
      }
      
      if (charts.macd) {
        await this.bot.sendPhoto(chatId, charts.macd, {
          caption: `üìà MACD ${symbol}`
        });
      }
      
      if (charts.prediction) {
        await this.bot.sendPhoto(chatId, charts.prediction, {
          caption: `ü§ñ LSTM –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ${symbol}`
        });
      }
    } catch (error) {
      console.error('Error sending charts:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤');
    }
  }

  async showBalance(chatId) {
    try {
      const balance = await this.analyzer.bybitAPI.getAccountBalance();
      
      if (!balance || balance.length === 0) {
        await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞');
        return;
      }
      
      let message = `üí∞ *–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:*\n\n`;
      
      balance.forEach(account => {
        if (parseFloat(account.walletBalance) > 0) {
          message += `ü™ô *${account.coin}:*\n`;
          message += `   üí∞ –ë–∞–ª–∞–Ω—Å: ${parseFloat(account.walletBalance).toFixed(4)}\n`;
          message += `   üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: ${parseFloat(account.availableBalance).toFixed(4)}\n`;
          message += `   üìà P&L: ${parseFloat(account.totalUnrealizedProfit).toFixed(4)}\n\n`;
        }
      });
      
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error showing balance:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
    }
  }

  async showLiquidations(chatId, symbol) {
    try {
      const liquidations = await this.analyzer.bybitAPI.getLiquidations(symbol, 20);
      
      if (!liquidations || liquidations.length === 0) {
        await this.bot.sendMessage(chatId, `üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö –¥–ª—è ${symbol}`);
        return;
      }
      
      let message = `üî• *–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ ${symbol} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):*\n\n`;
      
      liquidations.slice(0, 10).forEach((liq, index) => {
        const emoji = liq.side === 'Buy' ? 'üî¥' : 'üü¢';
        const time = new Date(liq.timestamp).toLocaleTimeString();
        message += `${index + 1}. ${emoji} ${liq.side} ${liq.size} @ $${liq.price.toFixed(2)}\n`;
        message += `   ‚è∞ ${time}\n\n`;
      });
      
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error showing liquidations:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π');
    }
  }

  async showTrades(chatId, symbol) {
    try {
      const recentTrades = await this.analyzer.bybitAPI.getRecentTrades(symbol, 20);
      const myTrades = await this.analyzer.bybitAPI.getMyTrades(symbol, 10);
      
      let message = `üìã *–°–¥–µ–ª–∫–∏ ${symbol}:*\n\n`;
      
      message += `üîÑ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏:*\n`;
      if (recentTrades && recentTrades.length > 0) {
        recentTrades.slice(0, 5).forEach((trade, index) => {
          const emoji = trade.side === 'Buy' ? 'üü¢' : 'üî¥';
          const time = new Date(trade.timestamp).toLocaleTimeString();
          message += `${index + 1}. ${emoji} ${trade.side} ${trade.size} @ $${trade.price.toFixed(2)}\n`;
          message += `   ‚è∞ ${time}\n`;
        });
      }
      
      message += `\nüë§ *–ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*\n`;
      if (myTrades && myTrades.length > 0) {
        myTrades.slice(0, 5).forEach((trade, index) => {
          const emoji = trade.side === 'Buy' ? 'üü¢' : 'üî¥';
          const time = new Date(trade.timestamp).toLocaleTimeString();
          message += `${index + 1}. ${emoji} ${trade.side} ${trade.size} @ $${trade.price.toFixed(2)}\n`;
          message += `   üí∞ –ö–æ–º–∏—Å—Å–∏—è: $${trade.fee.toFixed(4)}\n`;
          message += `   ‚è∞ ${time}\n`;
        });
      } else {
        message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–∏—Ö —Å–¥–µ–ª–∫–∞—Ö\n`;
      }
      
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error showing trades:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫');
    }
  }

  async showPositions(chatId) {
    try {
      const positions = await this.analyzer.bybitAPI.getOpenPositions();
      
      if (!positions || positions.length === 0) {
        await this.bot.sendMessage(chatId, 'üìä –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π');
        return;
      }
      
      let message = `üìà *–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n`;
      
      positions.forEach((pos, index) => {
        const emoji = pos.side === 'Buy' ? 'üü¢' : 'üî¥';
        const pnlEmoji = pos.unrealizedPnl >= 0 ? 'üìà' : 'üìâ';
        message += `${index + 1}. ${emoji} *${pos.symbol}*\n`;
        message += `   üìä –°—Ç–æ—Ä–æ–Ω–∞: ${pos.side}\n`;
        message += `   üìè –†–∞–∑–º–µ—Ä: ${pos.size}\n`;
        message += `   üí∞ –í—Ö–æ–¥: $${pos.entryPrice.toFixed(2)}\n`;
        message += `   üìç –¢–µ–∫—É—â–∞—è: $${pos.markPrice.toFixed(2)}\n`;
        message += `   ${pnlEmoji} P&L: $${pos.unrealizedPnl.toFixed(2)}\n`;
        message += `   ‚ö° –ü–ª–µ—á–æ: ${pos.leverage}x\n\n`;
      });
      
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error showing positions:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π');
    }
  }

  async showLiquidationsMenu(chatId) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üî• BTCUSDT', callback_data: 'liquidations_BTCUSDT' },
          { text: 'üî• ETHUSDT', callback_data: 'liquidations_ETHUSDT' }
        ],
        [
          { text: 'üî• SOLUSDT', callback_data: 'liquidations_SOLUSDT' },
          { text: 'üî• ADAUSDT', callback_data: 'liquidations_ADAUSDT' }
        ]
      ]
    };
    
    await this.bot.sendMessage(chatId, 'üî• –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π:', {
      reply_markup: keyboard
    });
  }

  async showTradesMenu(chatId) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã BTCUSDT', callback_data: 'trades_BTCUSDT' },
          { text: 'üìã ETHUSDT', callback_data: 'trades_ETHUSDT' }
        ],
        [
          { text: 'üìã SOLUSDT', callback_data: 'trades_SOLUSDT' },
          { text: 'üìã ADAUSDT', callback_data: 'trades_ADAUSDT' }
        ]
      ]
    };
    
    await this.bot.sendMessage(chatId, 'üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫:', {
      reply_markup: keyboard
    });
  }

  async showStrategyMenu(chatId, symbol) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üéØ –§–∞–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è', callback_data: `strategy_funding_${symbol}` },
          { text: 'üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑', callback_data: `strategy_technical_${symbol}` }
        ],
        [
          { text: 'ü§ñ LSTM –∞–Ω–∞–ª–∏–∑', callback_data: `strategy_lstm_${symbol}` },
          { text: 'üìà –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π', callback_data: `strategy_patterns_${symbol}` }
        ],
        [
          { text: 'üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: `analyze_${symbol}` },
          { text: 'üìã –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', callback_data: `strategy_all_${symbol}` }
        ]
      ]
    };
    
    await this.bot.sendMessage(chatId, `üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è ${symbol}:*`, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  async showStrategySelectionMenu(chatId) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üéØ –§–∞–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è', callback_data: 'strategy_funding_menu' },
          { text: 'üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑', callback_data: 'strategy_technical_menu' }
        ],
        [
          { text: 'ü§ñ LSTM –∞–Ω–∞–ª–∏–∑', callback_data: 'strategy_lstm_menu' },
          { text: 'üìà –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π', callback_data: 'strategy_patterns_menu' }
        ],
        [
          { text: 'üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'strategy_full_menu' },
          { text: 'üìã –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', callback_data: 'strategy_all_menu' }
        ]
      ]
    };
    
    await this.bot.sendMessage(chatId, 'üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*', {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  async showHelp(chatId) {
    const helpMessage = `
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

üîç *–ê–Ω–∞–ª–∏–∑:*
/analyze TICKER - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
/strategy TICKER - –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
–ü—Ä–∏–º–µ—Ä: /analyze BTCUSDT

üéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:*
‚Ä¢ –§–∞–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –≤—Ö–æ–¥ –ø–æ–¥ —Ñ–∞–Ω–¥–∏–Ω–≥
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
‚Ä¢ LSTM –∞–Ω–∞–ª–∏–∑ - –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π - –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
‚Ä¢ –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

üí∞ *–ê–∫–∫–∞—É–Ω—Ç:*
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
/positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏

üî• *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*
/liquidations TICKER - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
/trades TICKER - –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫

üìä *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã:*
BTCUSDT, ETHUSDT, SOLUSDT, ADAUSDT, DOTUSDT, LINKUSDT, MATICUSDT, AVAXUSDT

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–ª–∞—Ç–∞–º–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ –ø–æ–∑–∏—Ü–∏–∏

üéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è "–í—Ö–æ–¥ –ø–æ–¥ —Ñ–∞–Ω–¥–∏–Ω–≥":*
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —Ñ–∞–Ω–¥–∏–Ω–≥ –∏ –≤—Ä–µ–º—è –¥–æ –≤—ã–ø–ª–∞—Ç—ã
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ (LONG/SHORT)
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞, —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–ª–µ—á–æ

üÜò *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
`;

    await this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
  }

  async showPopular(chatId, strategyType = null) {
    const popularPairs = [
      'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 
      'DOTUSDT', 'LINKUSDT', 'MATICUSDT', 'AVAXUSDT',
      'ATOMUSDT', 'UNIUSDT', 'LTCUSDT', 'BCHUSDT'
    ];
    
    let title = '‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:';
    let callbackPrefix = 'analyze';
    
    if (strategyType) {
      switch (strategyType) {
        case 'funding':
          title = 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞:';
          callbackPrefix = 'strategy_funding';
          break;
        case 'technical':
          title = 'üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:';
          callbackPrefix = 'strategy_technical';
          break;
        case 'lstm':
          title = 'ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è LSTM –∞–Ω–∞–ª–∏–∑–∞:';
          callbackPrefix = 'strategy_lstm';
          break;
        case 'patterns':
          title = 'üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:';
          callbackPrefix = 'strategy_patterns';
          break;
        case 'full':
          title = 'üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:';
          callbackPrefix = 'analyze';
          break;
        case 'all':
          title = 'üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:';
          callbackPrefix = 'strategy_all';
          break;
      }
    }
    
    const keyboard = {
      inline_keyboard: popularPairs.map(pair => [{
        text: `üìä ${pair}`,
        callback_data: `${callbackPrefix}_${pair}`
      }])
    };
    
    await this.bot.sendMessage(chatId, title, {
      reply_markup: keyboard
    });
  }

  formatNumber(num) {
    if (num >= 1e9) return (num / 1e9).toFixed(2) + 'B';
    if (num >= 1e6) return (num / 1e6).toFixed(2) + 'M';
    if (num >= 1e3) return (num / 1e3).toFixed(2) + 'K';
    return num.toFixed(2);
  }

  // Helper function to escape Markdown characters
  escapeMarkdown(text) {
    if (!text) return '';
    return text.toString()
      .replace(/_/g, '\\_')
      .replace(/\*/g, '\\*')
      .replace(/\[/g, '\\[')
      .replace(/\]/g, '\\]')
      .replace(/\(/g, '\\(')
      .replace(/\)/g, '\\)')
      .replace(/~/g, '\\~')
      .replace(/`/g, '\\`')
      .replace(/>/g, '\\>')
      .replace(/#/g, '\\#')
      .replace(/\+/g, '\\+')
      .replace(/-/g, '\\-')
      .replace(/=/g, '\\=')
      .replace(/\|/g, '\\|')
      .replace(/\{/g, '\\{')
      .replace(/\}/g, '\\}')
      .replace(/\./g, '\\.')
      .replace(/!/g, '\\!');
  }

  start() {
    console.log('üöÄ Bybit Analyzer Bot –∑–∞–ø—É—â–µ–Ω!');
    console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã');
  }

  // –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  startWebInterface() {
    try {
      this.webInterface.start();
      console.log('üåê Web interface started successfully');
    } catch (error) {
      console.error('‚ùå Error starting web interface:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new BybitAnalyzerBot();
bot.start();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  process.exit(0);
});
